{"ast":null,"code":"const domainPath = 'http://localhost:3001'; // simpan url domain server API pada variabel, sehingga bisa dinamis (diganti)\n\nconst GetAPI = path => {\n  // path digunakan untuk menunjuk alamat API mana yang akan di-request   \n  const promise = new Promise((resolve, reject) => {\n    fetch(`${domainPath}/${path}`) // alamat url domain + path untuk mengakses full alamat API yg di-request\n    .then(response => response.json()) // response dari server harus dijadikan json\n    .then(result => {\n      resolve(result); // jika success menerima response dari server maka resove response ke user\n    }, err => {\n      reject(err); // jika terjadi error dari server (server down, dll),\n    }); // maka kirim pesan error ke user melalui reject.\n  });\n  return promise;\n};\n\n_c = GetAPI;\n\nconst getNewsBlog = () => GetAPI('posts?_sort=id&_order=desc');\n\nconst API = {\n  // inisialisasi function-function yang akan disediakan global API.\n  getNewsBlog\n};\nexport default API;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetAPI\");","map":{"version":3,"sources":["C:/Users/ASUS/Pemrograman-Framework/minggu9/react-web/src/services/index.js"],"names":["domainPath","GetAPI","path","promise","Promise","resolve","reject","fetch","then","response","json","result","err","getNewsBlog","API"],"mappings":"AAAA,MAAMA,UAAU,GAAG,uBAAnB,C,CAA2C;;AAC3C,MAAMC,MAAM,GAAIC,IAAD,IAAU;AAAkB;AACvC,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7CC,IAAAA,KAAK,CAAE,GAAEP,UAAW,IAAGE,IAAK,EAAvB,CAAL,CAAwC;AAAxC,KACKM,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EACwC;AADxC,KAEKF,IAFL,CAEWG,MAAD,IAAY;AACdN,MAAAA,OAAO,CAACM,MAAD,CAAP,CADc,CACkB;AACnC,KAJL,EAIQC,GAAD,IAAS;AACRN,MAAAA,MAAM,CAACM,GAAD,CAAN,CADQ,CACwB;AACnC,KANL,EAD6C,CAOL;AAC3C,GARe,CAAhB;AASA,SAAOT,OAAP;AACH,CAXD;;KAAMF,M;;AAaN,MAAMY,WAAW,GAAG,MAAMZ,MAAM,CAAC,4BAAD,CAAhC;;AAEA,MAAMa,GAAG,GAAG;AAAQ;AAChBD,EAAAA;AADQ,CAAZ;AAIA,eAAeC,GAAf","sourcesContent":["const domainPath = 'http://localhost:3001' // simpan url domain server API pada variabel, sehingga bisa dinamis (diganti)\r\nconst GetAPI = (path) => {                 // path digunakan untuk menunjuk alamat API mana yang akan di-request   \r\n    const promise = new Promise((resolve, reject) => {\r\n        fetch(`${domainPath}/${path}`)          // alamat url domain + path untuk mengakses full alamat API yg di-request\r\n            .then(response => response.json())  // response dari server harus dijadikan json\r\n            .then((result) => {\r\n                resolve(result);                // jika success menerima response dari server maka resove response ke user\r\n            }, (err) => {\r\n                reject(err);                    // jika terjadi error dari server (server down, dll),\r\n            })                                  // maka kirim pesan error ke user melalui reject.\r\n    })\r\n    return promise;\r\n}\r\n\r\nconst getNewsBlog = () => GetAPI('posts?_sort=id&_order=desc');\r\n\r\nconst API = {       // inisialisasi function-function yang akan disediakan global API.\r\n    getNewsBlog\r\n}\r\n\r\nexport default API;"]},"metadata":{},"sourceType":"module"}